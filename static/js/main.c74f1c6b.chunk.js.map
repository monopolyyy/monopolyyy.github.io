{"version":3,"sources":["assets/ChaChing.m4a","App.js","reportWebVitals.js","index.js"],"names":["App","useState","newPlayerName","setNewPlayerName","pot","setPot","lastTransaction","setLastTransaction","sign","setSign","gameTypes","INITIAL_STATE","players","selectedPlayer","init","playerFactory","createNewPlayer","name","balance","transactions","useReducer","state","action","type","newPlayer","payload","id","length","map","player","initialValue","JSON","parse","localStorage","getItem","dispatch","useEffect","setItem","stringify","updatePlayer","setSelectedPlayer","handleDoubleClick","playerId","amount","find","p","push","twoWayTransaction","Audio","ChaChing","play","className","onClick","onSubmit","e","preventDefault","value","onChange","target","bind","onDoubleClick","slice","reverse","tx","idx","s","deno","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c74f1c6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ChaChing.ffb0e827.m4a\";","import React, { useEffect, useReducer, useState } from \"react\";\nimport \"./App.css\";\n\nimport ChaChing from './assets/ChaChing.m4a'\n\nconst App = () => {\n  const [newPlayerName, setNewPlayerName] = useState(\"\");\n  const [pot, setPot] = useState(0);\n  const [lastTransaction, setLastTransaction] = useState(null);\n  const [sign, setSign] = useState(1);\n\n  const denominations = [1, 5, 10, 100, 500];\n\n  const gameTypes = {\n    ADD_PLAYER: \"ADD_PLAYER\",\n    UPDATE_PLAYER: \"UPDATE_PLAYER\",\n    SET_SELECTED_PLAYER: \"SET_SELECTED_PLAYER\",\n    FINISH_INIT: \"FINISH_INIT\",\n  };\n\n  const INITIAL_STATE = {\n    players: [],\n    selectedPlayer: null,\n    init: true,\n  };\n\n  const initializer = (initialValue = INITIAL_STATE) =>\n    JSON.parse(localStorage.getItem(\"monopoly\")) || initialValue;\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case gameTypes.ADD_PLAYER:\n        const newPlayer = playerFactory.createNewPlayer(action.payload);\n        newPlayer.id = state.players.length + 1;\n\n        return {\n          ...state,\n          players: [...state.players, newPlayer],\n        };\n\n      case gameTypes.UPDATE_PLAYER:\n        return {\n          ...state,\n          players: state.players.map((player) => {\n            return player.id === action.payload.id ? action.payload : player;\n          }),\n        };\n\n      case gameTypes.SET_SELECTED_PLAYER:\n        return {\n          ...state,\n          selectedPlayer: action.payload,\n        };\n\n      case gameTypes.FINISH_INIT:\n        return {\n          ...state,\n          init: false,\n        };\n\n      default:\n        return state;\n    }\n  };\n\n  const playerFactory = (() => {\n    return {\n      createNewPlayer: (name) => {\n        return {\n          name,\n          balance: 1500,\n          transactions: [],\n        };\n      },\n    };\n  })();\n\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE, initializer);\n\n  useEffect(() => {\n    localStorage.setItem(\"monopoly\", JSON.stringify(state));\n  }, [state]);\n\n  const addPlayer = (name) =>\n    dispatch({ type: gameTypes.ADD_PLAYER, payload: name });\n\n  const updatePlayer = (player) => {\n    dispatch({ type: gameTypes.UPDATE_PLAYER, payload: player });\n  };\n\n  const setSelectedPlayer = (id) => {\n    dispatch({ type: gameTypes.SET_SELECTED_PLAYER, payload: id });\n  };\n\n  const finishInit = () =>\n    dispatch({\n      type: gameTypes.FINISH_INIT,\n    });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    addPlayer(newPlayerName);\n\n    setNewPlayerName(\"\");\n  };\n\n  const confirmTransaction = () => {\n    const amount = sign * pot;\n    const playerId = state.selectedPlayer;\n\n    const player = state.players.find((p) => p.id === playerId);\n\n    // shouldn't happen\n    if (!player) return;\n\n    if (player.balance + amount < 0) {\n      return;\n    }\n\n    player.transactions.push({ amount });\n    player.balance += amount;\n    updatePlayer(player);\n    setPot(0);\n    setLastTransaction(amount);\n  };\n\n  const twoWayTransaction = ({ playerId, amount }) => {\n    const player = state.players.find((p) => p.id === playerId);\n\n    // shouldn't happen\n    if (!player) return;\n\n    player.transactions.push({ amount });\n    player.balance += amount;\n    updatePlayer(player);\n    setLastTransaction(null);\n  };\n\n  const handleDoubleClick = (playerId) => {\n    if (lastTransaction === null) return; // no last transaction\n\n    twoWayTransaction({ playerId, amount: -1 * lastTransaction });\n    const audio = new Audio(ChaChing);\n    audio.play()\n  };\n\n  return state.init ? (\n    <div className=\"players-preview\">\n      <button onClick={finishInit}>Finish Adding</button>\n      <ul>\n        {state.players.map((player) => (\n          <li key={player.id}>{player.name}</li>\n        ))}\n      </ul>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Add player:\n          <input\n            type=\"text\"\n            value={newPlayerName}\n            onChange={(e) => setNewPlayerName(e.target.value)}\n          />\n        </label>\n        <button>Add Player</button>\n      </form>\n    </div>\n  ) : (\n    <section>\n      <div className=\"players-container\">\n        {state.players.map((player) => (\n          <div\n            className={\n              state.selectedPlayer === player.id ? \"player active\" : \"player\"\n            }\n            key={player.id}\n            onClick={setSelectedPlayer.bind(this, player.id)}\n            onDoubleClick={handleDoubleClick.bind(this, player.id)}\n          >\n            <h1>{player.name}</h1>\n            <h5>${player.balance}</h5>\n            <ul className=\"transactions\">\n              {player.transactions\n                .slice(-3)\n                .reverse()\n                .map((tx, idx) => (\n                  <div\n                    className={\n                      tx.amount > 0 ? \"transaction plus\" : \"transaction minus\"\n                    }\n                    key={idx}\n                  >\n                    {tx.amount}\n                  </div>\n                ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n\n      <hr />\n      <h3\n        className={sign === 1 ? \"amount plus\" : \"amount minus\"}\n        onClick={() => setSign((s) => s * -1)}\n      >\n        {sign * pot}\n      </h3>\n      <div className=\"denominations-container\">\n        {denominations.map((deno, idx) => {\n          return (\n            <div key={deno}>\n              <button\n                className={`denomination denomination--${idx + 1}`}\n                onClick={() => setPot((p) => (p += deno))}\n              >\n                {deno}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n\n      <button onClick={confirmTransaction} className=\"confirm-btn\">\n        Confirm Transaction\n      </button>\n    </section>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}